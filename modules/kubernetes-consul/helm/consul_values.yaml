# Available parameters and their default values for the Consul chart.
# Server, when enabled, configures a server cluster to run. This should
# be disabled if you plan on connecting to a Consul cluster external to
# the Kube cluster.
global:
  # image: hashicorpdev/consul
  # imageK8S: hashicorpdev/consul-k8s:crd-controller-base-latest
  name: consul

  datacenter: #{{ .Vars.datacenter }}

  acls:
    manageSystemACLs: #{{ .Vars.acl_enabled }}
  tls:
    enabled: #{{ .Vars.tls_enabled }}
    enableAutoEncrypt: #{{ .Vars.tls_enabled }}
    httpsOnly: false

  federation:
    enabled: #{{ .Vars.federation_enabled }}
    createFederationSecret: #{{ .Vars.create_federation_secret }}

  image: #{{ .Vars.consul_image }}
  
  imageK8S: #{{ .Vars.consul_k8s_image }}
  
  imageEnvoy: #{{ .Vars.consul_envoy_image }}

  metrics:
    enabled: #{{ .Vars.metrics_enabled }}
    enableAgentMetrics: #{{ .Vars.metrics_enabled }}
    enableGatewayMetrics: #{{ .Vars.metrics_enabled }}
  
  logLevel: #{{ if eq .Vars.debug true }}"debug"#{{ else }}"info"#{{ end }}

server:
  replicas: 1
  bootstrapExpect: 1

  storage: 128Mi

  extraConfig: |
    {
      "ui_config": {
        "enabled": true,
        "metrics_provider": "prometheus",
        "metrics_proxy": {
          "base_url": "http://prometheus-kube-prometheus-prometheus.#{{ .Vars.monitoring_namespace }}.svc:9090"
        }
      }
    }

controller:
  enabled: true
ui:
  enabled: true
connectInject:
  enabled: true
  default: false  # true will inject by default, otherwise requires annotation
  failurePolicy: "Ignore"
  replicas: 1
  envoyExtraArgs: #{{ if eq .Vars.debug true }}"--log-level debug"#{{ else }}null#{{ end }}

  transparentProxy:
    defaultEnabled: #{{ .Vars.transparent_proxy_enabled }}

  # Requires Consul v1.5+ and consul-k8s v0.8.1+
  centralConfig:
    enabled: true

ingressGateways:
  enabled: #{{ .Vars.ingress_gateway_enabled }}
  defaults:
    replicas: 1
    service:
      ports:
      #{{ range .Vars.ingress_gateway_ports }}
        - port: #{{ . }}
          nodePort: null
      #{{ end }}


meshGateway:
  enabled: #{{ .Vars.mesh_gateway_enabled }}
  replicas: 1

  wanAddress:
    source: Static
    static: #{{ .Vars.mesh_gateway_address }}
    port: 30443

  service:
    enabled: #{{ .Vars.mesh_gateway_enabled }}
    type: NodePort
    nodePort: 30443
